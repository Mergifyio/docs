# Conventional Commits Guidelines for Cursor

## Commit Message Format

When creating commits or suggesting commit messages, ALWAYS follow the Conventional Commits specification:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types (REQUIRED)
Use one of these commit types:
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
- `ci`: Changes to CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
- `chore`: Other changes that don't modify src or test files
- `revert`: Reverts a previous commit

### Scope (OPTIONAL)
The scope should be the name of the affected component, module, or area of the codebase. Examples:
- `feat(auth): add OAuth2 support`
- `fix(api): handle null values in user endpoint`
- `docs(readme): update installation instructions`

### Description (REQUIRED)
- Use the imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No period (.) at the end
- Keep it concise (preferably under 50 characters)

### Body (OPTIONAL)
- Use the imperative, present tense
- Include motivation for the change and contrast with previous behavior
- Wrap at 72 characters

### Footer (OPTIONAL)
- Reference GitHub issues, PRs, or breaking changes
- Format: `Fixes #123` or `Closes #456`
- For breaking changes: start with `BREAKING CHANGE:`

## Examples

### Simple commit:
```
feat: add user authentication
```

### Commit with scope:
```
fix(server): handle database connection timeouts
```

### Commit with body:
```
refactor(auth): simplify token validation logic

Remove redundant checks and consolidate validation logic
into a single method. This improves maintainability and
reduces code duplication.
```

### Commit with footer:
```
fix(api): prevent race condition in payment processing

Add mutex lock to ensure atomic operations during
payment status updates.

Fixes #789
```

### Breaking change:
```
feat(api)!: change user endpoint response format

BREAKING CHANGE: The user endpoint now returns a nested
structure with user data under a 'data' property instead
of returning user fields directly.
```

## Pull Request Titles

When suggesting PR titles, follow the same conventional commit format:
- Use the same type prefixes
- Keep titles clear and descriptive
- Include the scope when relevant
- Don't exceed 72 characters

## Additional Rules

1. **Be Specific**: Choose the most accurate type for the change
2. **One Thing Per Commit**: Each commit should represent a single logical change
3. **Test Changes**: If adding features or fixes, mention test coverage in the body when relevant
4. **Reference Issues**: Always link to related issues in the footer when applicable
5. **Use Present Tense**: Write as if you're instructing the codebase to change

## Enforcement

When I create or suggest commits:
- I will ALWAYS follow this format
- I will suggest splitting commits if they contain multiple unrelated changes
- I will help reword commit messages that don't follow the convention
- I will provide examples if you're unsure about the correct format